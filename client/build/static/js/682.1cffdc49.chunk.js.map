{"version":3,"file":"static/js/682.1cffdc49.chunk.js","mappings":"0LAiBO,SAASA,EAAmBC,GAAoB,IAAnB,QAACC,EAAO,OAAEC,GAAOF,EACjD,MAAMG,EAXV,SAAsBC,GAAY,IAAX,QAACH,GAAQG,EAC5B,MACMC,EADM,IAAIC,IAAIL,EAAQM,KAAKC,aACZC,IAAI,YACzB,OAAIJ,GAA0BK,cAAbL,EACV,IAD+D,GAE1E,CAMuBM,CAAc,CAACV,YAClC,GAAiB,MAAdE,EAAmB,CAClB,MAAMS,EAAaV,EAAOU,WAC1B,MAAkB,UAAfA,GAAwC,YAAdA,GAClBC,EAAAA,EAAAA,IAAU,WAEVA,EAAAA,EAAAA,IAAS,IAAID,IAE5B,CAEA,OAAO,IACX,CAMAE,eAAeC,EAAYC,GAAoB,IAAnB,OAACd,EAAM,QAAED,GAAQe,EACzC,MAAMJ,EAAaV,EAAOU,WAC1B,GAAkB,UAAfA,GAAwC,YAAdA,EACzB,OAAOC,EAAAA,EAAAA,IAAU,UAErB,IAAII,EAAS,QAAQL,IAErB,MAAML,EAAM,IAAID,IAAIL,EAAQM,KAAKC,aACjC,GAAGD,EAAIW,KAAM,EAAE,CACXD,GAAQ,IACR,IAAIE,EAAE,EACN,IAAK,MAAMC,KAAOb,EAAIc,OACfF,EAAE,IAAGF,GAAQ,KAChBA,GAAS,GAAGG,KAAOb,EAAIE,IAAIW,KAC3BD,GAER,CACA,MAAMG,QAAiBC,MAAMN,GACvBO,QAAqBF,EAASG,OAEpC,IAAIH,EAASI,GACT,MAAMD,EAAAA,EAAAA,IAAK,CAACE,QAASH,EAAaG,SAAU,CAACC,OAAQN,EAASM,SAGlE,OAAOJ,EAAaK,IAExB,CAMO,SAASC,EAAWC,GAAoB,IAAnB,OAAC7B,EAAM,QAAED,GAAQ8B,EACzC,OAAOC,EAAAA,EAAAA,IAAM,CAACC,UAAWlB,EAAa,CAACb,SAAQD,aACnD,CAGAa,eAAeoB,EAAQC,GAAW,IAAV,OAACjC,GAAOiC,EAC5B,MAAMb,QAAiBC,MAAM,QAAQrB,EAAOU,cAAcV,EAAOkC,MAC3DZ,QAAqBF,EAASG,OACpC,IAAIH,EAASI,GACT,MAAMD,EAAAA,EAAAA,IAAK,CAACE,QAASH,EAAaG,SAAU,CAACC,OAAQN,EAASM,SAGlE,OAAOJ,CACX,CAIO,SAASa,EAAUC,GAAW,IAAV,OAACpC,GAAOoC,EAC/B,OAAON,EAAAA,EAAAA,IAAM,CAACO,SAAUL,EAAS,CAAChC,YACtC,C","sources":["utils/loaders.jsx"],"sourcesContent":["import { defer, json, redirect } from \"react-router-dom\";\r\n\r\n\r\n//PROTECT ROUTES\r\n/**compares the passwoed in the url with the one saved in the config file\r\n * @return 200 in case of success and 401 for not authorized\r\n */\r\nfunction protectRoutes({request}){\r\n    const url = new URL(request.url).searchParams\r\n    const password = url.get(\"password\")\r\n    if(!password || (password !== process.env.REACT_APP_PASSWORD)) return 401\r\n    return 200\r\n}\r\n\r\n/**loader of the protected routes.\r\n * checks the password in the url and if authorized, return null\r\n */\r\nexport function protectRoutesLoader({request, params}){\r\n    const authStatus = protectRoutes({request})\r\n    if(authStatus !==200) {\r\n        const collection = params.collection\r\n        if(collection !== \"books\" && collection!== \"stories\"){\r\n            return redirect (\"/books\")\r\n        }else{\r\n            return redirect(`/${collection}`)\r\n        }\r\n    }\r\n    \r\n    return null\r\n}\r\n\r\n\r\n/**returns the items docs in case of the collection being books or stories, otherwise throw an error\r\n * also handles url with filters and search params\r\n */\r\nasync function loadAllItems({params, request}){\r\n    const collection = params.collection\r\n    if(collection !== \"books\" && collection!== \"stories\"){\r\n        return redirect (\"/books\")\r\n    }\r\n    let apiUrl = `/api/${collection}`\r\n    // getting the search parameters (the ones after the ?) from the url and put it in the url for the api\r\n    const url = new URL(request.url).searchParams\r\n    if(url.size >0){\r\n        apiUrl+=\"?\"\r\n        let i=0\r\n        for (const key of url.keys()) {\r\n            if(i>0) apiUrl+=\"&\"\r\n            apiUrl+= `${key}=${url.get(key)}`\r\n            i++\r\n          }\r\n    }\r\n    const response = await fetch(apiUrl)\r\n    const responseData = await response.json()\r\n\r\n    if(!response.ok){\r\n        throw json({message: responseData.message}, {status: response.status})\r\n    }\r\n\r\n    return responseData.docs\r\n\r\n}\r\n\r\n\r\n/**loads the page of the items using defer to load the page without waiting for the data\r\n * @returns itemsData which is the docs of all the items\r\n */\r\nexport function itemsLoader({params, request}){\r\n    return defer({itemsData: loadAllItems({params, request})})\r\n}\r\n\r\n/**retrives the item from the api */\r\nasync function loadItem({params}){\r\n    const response = await fetch(`/api/${params.collection}/${params.id}`)\r\n    const responseData = await response.json()\r\n    if(!response.ok){\r\n        throw json({message: responseData.message}, {status: response.status})\r\n    }\r\n\r\n    return responseData\r\n}\r\n\r\n\r\n/**load an item and defer */\r\nexport function itemLoader({params}){\r\n    return defer({itemData: loadItem({params})})\r\n}\r\n"],"names":["protectRoutesLoader","_ref2","request","params","authStatus","_ref","password","URL","url","searchParams","get","process","protectRoutes","collection","redirect","async","loadAllItems","_ref3","apiUrl","size","i","key","keys","response","fetch","responseData","json","ok","message","status","docs","itemsLoader","_ref4","defer","itemsData","loadItem","_ref5","id","itemLoader","_ref6","itemData"],"sourceRoot":""}